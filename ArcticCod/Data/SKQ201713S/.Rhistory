plot(u_s, z, 'n', xlab= 'Velocity (m/s)', ylab='Depth (m)', xlim=c(0, 0.03))
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
}
plot(u_s, z, 'n', xlab= 'Velocity (m/s)', ylab='Depth (m)', xlim=c(0.015, 0.03))
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
}
k = c(0.1, 0.2, 0.4)
plot(u_s, z, 'n', xlab= 'Velocity (m/s)', ylab='Depth (m)', xlim=c(0.015, 0.02))
colorz=c('black', 'red', 'blue')
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
}
plot(u_s, z, 'n', xlab= 'Velocity (m/s)', ylab='Depth (m)', xlim=c(0.015, 0.025))
colorz=c('black', 'red', 'blue')
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
}
plot(u_s, z, 'n', xlab= 'Velocity (m/s)', ylab='Depth (m)', xlim=c(0.015, 0.022))
colorz=c('black', 'red', 'blue')
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
}
legend('bottomright', col=colorz, lty=1, c('k=0.1', 'k=0.2', 'k=0.4'))
toplot = tanh(1*2*pi/lambda)*lambda
plot(lambda, toplot)
toplot = tanh(10*2*pi/lambda)*lambda
plot(lambda, toplot)
for (i in 1:length(k)){
u_s = a^2*c/(2*h^2)*cosh(2*k[i]*(z+h))
lines(u_s, z, 'l', col=colorz[i])
print(sum(u_s))
}
heritability<-data.frame(momID=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
dadID=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
momvalue=c(83,31,63,46,42,81,29,61,44,42,82,30,62,45,42),
dadvalue=c(65,65,65,80,80,80,33,33,33,63,63,63,32,32,32),
offspring=c(74,52,53,70,50,76,32,60,42,40,82,50,55,50,40))
View(heritability)
heritability$midparent<-rowMeans(heritability[3:4])
View(heritability)
midparent_Off<-lm(heritability$offspring~heritability$midparent)
summary(midparent_Off)
plot(heritability$offspring~heritability$midparent)
abline(midparent_Off)
covOff_Mid<-cov(heritability$offspring,heritability$midparent)
covOff_Mid
varMid<-var(heritability$midparent)
varMid
covOff_Mid/varMid
paternal_halfsib<-lm(heritability$offspring~heritability$dadvalue)
summary(paternal_halfsib)
plot(heritability$offspring~heritability$dadvalue)
abline(paternal_halfsib)
maternal_halfsib<-lm(heritability$offspring~heritability$momvalue)
summary(maternal_halfsib)
plot(heritability$offspring~heritability$momvalue)
abline(maternal_halfsib)
cov(heritability$offspring,heritability$dadvalue)
var(heritability$dadvalue)
cov(heritability$offspring,heritability$momvalue)
var(heritability$momvalue)
heritablityLong<-gather(heritability,parent,value,momvalue:dadvalue,factor_key=TRUE)
library(tidyr)
?gather
??gather
install.packages('tidyr')
library(tidyr)
#first need value for all parents:
heritablityLong<-gather(heritability,parent,value,momvalue:dadvalue,factor_key=TRUE)
hist(heritablityLong$value,breaks=3)
#get mean of parents:
meanparent<-mean(heritablityLong$value)
meanparent
selected<-heritability[which(heritability$momvalue >= 42 & heritability$dadvalue>=42),]
selectedlong<-gather(selected,parent,value,momvalue:dadvalue,factor_key=TRUE)
meansel<-mean(selectedlong$value)
meansel
hist(selectedlong$value)
meanoff<-mean(selected$offspring)
meanoff
hist(selected$offspring)
S<-meansel-meanparent
S
R<-meanoff-meanparent
R
h2=R/S
h2
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_samples.csv')
names(tuna)
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_samples.csv', header=TRUE)
names(tuna)
head(tuna)
?read.csv
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
names(tuna)
tuna<- tuna[,c(4,6:8,12:15,16,34:36)]
names(tuna)
names(tuna)[1]<-"SampleID"
names(tuna)<- c("SampleID", "Cruise", "Station", "NetID",
"LatDegN", "LatMin", "LonDegE", "LonMin",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
tuna$LatDEC<- -tuna$LatDeg+(tuna$LatMin+tuna$LatTen)/60
tuna$LatDEC<- -tuna$LatDegN+(tuna$LatMin)/60
tuna$LonDEC<- -tuna$LonDegE+(tuna$LonMin)/60
range(tuna$LonDEC)
range(tuna$LonDEC, na.rm=TRUE)
min(tuna$LonDEC)
range(tuna$LonDegE)
min(tuna$LonDegE)
View(tuna)
library(ocedata)
require(pracma)
data(coastlineWorldFine, package="ocedata")
data(topoWorld) # coarse resolution
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
tuna<- tuna[,c(4,6:8,12:15,16,34:36)]
names(tuna)<- c("SampleID", "Cruise", "Station", "NetID",
"LatDegN", "LatMin", "LonDegE", "LonMin",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
View(tuna)
View(tuna)
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
tuna<- tuna[,c(4,6:8,16,34:36)]
names(tuna)<- c("SampleID", "Cruise", "Station", "NetID",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
View(tuna)
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
names(station_coords)
head(station_coords)
head(tuna)
noquote(strsplit("A text I want to display with spaces", NULL)[[1]])
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
test<- strsplit(station_coords$Station, "-")[[2]]
station_coords$Station[1]
test<- strsplit(station_coords$Station, "-")
?strsplit
test<- strsplit(station_coords$Station, "-", fixed=TRUE)
test<- strsplit(station_coords$Station, "0", fixed=TRUE)
test<- strsplit(station_coords$Station[1], "0", fixed=TRUE)
class(station_coords$Station)
station_coords$Station<- as.character(station_coords$Station)
test<- strsplit(station_coords$Station[1], "-", fixed=TRUE)
head(test)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)
head(test)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)[2]
head(test)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)[[]][2]
?apply
test<- apply(station_coords$Station, 1, strsplit, "-", fixed=TRUE)
test<- apply(station_coords$Station, 2, strsplit, "-", fixed=TRUE)
test<- vapply(station_coords$Station, strsplit, "-", fixed=TRUE)
test<- vapply(station_coords$Station, strsplit, split="-", fixed=TRUE)
?vapply
test<- lapply(station_coords$Station, strsplit, split="-", fixed=TRUE)
head(test)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)
head(test)
do.call(rbind, test)
test<-rbind(test)
head(test)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)
test<- do.call(rbind, test)
head(test)
stationNum<- as.numeric(do.call(rbind, test)[,2])
station_coords$Station<- as.character(station_coords$Station)
test<- strsplit(station_coords$Station, "-", fixed=TRUE)
stationNum<- as.numeric(do.call(rbind, test)[,2])
head(stationNum)
station_coords$StationNumber <- stationNum
head(station_coords)
?merge
head(tuna)
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
tuna<- tuna[,c(4,6:8,16,34:36)]
names(tuna)<- c("SampleID", "Cruise", "Station", "NetID",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
head(tuna)
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
head(station_coords)
station_coords<- station_coords[,c(1,14,15)]
head(station_coords)
station_coords<- station_coords[,c(1,15,16)]
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
station_coords<- station_coords[,c(1,15,16)]
head(station_coords)
names(tuna)<- c("Station", "Cruise", "StationNum", "NetID",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
tuna2<- merge(tuna, station_coords, by="Station")
head(tuna2)
head(tuna)
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
tuna<- tuna[,c(4,6:8,16,34:36)]
names(tuna)<- c("Station", "Cruise", "StationNum", "NetID",
"SampleType", "Nfish", "NThunnus", "NSkipjack")
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
station_coords<- station_coords[,c(1,15,16)]
tuna2<- merge(tuna, station_coords, by="Station")
head(tuna2)
dim(tuna2)
dim(tuna)
tuna2<- tuna2[!is.na(tuna2$NThunnus),]
dim(tuna2)
tuna2
View(tuna2)
tuna2<- merge(tuna, station_coords, by="Station")
View(tuna2)
tuna2<- merge(tuna, station_coords, by="Station", all.x=TRUE)
tuna3<- tuna2[!is.na(tuna2$NThunnus),]
tuna3
tuna3[,c(1,7:10)]
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
names(tuna)
tuna<- tuna[,c(4,6:8,16,30, 31, 34:36)]
names(tuna)<- c("Station", "Cruise", "StationNum", "NetID",
"SampleType", "LatDec", "LonDec", "Nfish",
"NThunnus", "NSkipjack")
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
station_coords<- station_coords[,c(1,15,16)]
tuna2<- merge(tuna, station_coords, by="Station", all.x=TRUE)
tuna3<- tuna2[!is.na(tuna2$NThunnus),]
head(tuna3)
tuna3
dim(tuna3)
tuna3$LatDec[is.na(tuna3$LatDec)]<-tuna3$LatDEC
tuna3$LatDec[is.na(tuna3$LatDec)]<-tuna3$LatDEC[is.na(tuna3$LatDec)]
tuna3
tuna3$LonDec[is.na(tuna3$LonDec)]<-tuna3$LonDEC[is.na(tuna3$LonDec)]
tuna3
tuna<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/S268_tuna.csv', header=TRUE)
tuna<- tuna[,c(4,6:8,16,30, 31, 34:36)]
names(tuna)<- c("Station", "Cruise", "StationNum", "NetID",
"SampleType", "LatDec", "LonDec", "Nfish",
"NThunnus", "NSkipjack")
station_coords<- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/Station_Coords2016.csv',
header=TRUE)
station_coords<- station_coords[,c(1,15,16)]
tuna2<- merge(tuna, station_coords, by="Station", all.x=TRUE)
tuna3<- tuna2[!is.na(tuna2$NThunnus),]
tuna3$LatDec[is.na(tuna3$LatDec)]<-tuna3$LatDEC[is.na(tuna3$LatDec)]
tuna3$LonDec[is.na(tuna3$LonDec)]<-tuna3$LonDEC[is.na(tuna3$LonDec)]
tuna3
currents <- read.csv('072015_currents.csv', header=FALSE)
currents <- read.csv('/Users/chrissy/JointProgram/PIPA/2016_S268/PIPA_2016_currents.csv', header=FALSE)
currents[,1]<- currents[,1]-360
head(currents)
tunadata<- tuna3
names(tunadata)
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDEC, posstat$LatDEC, cex=posstat$ThunnusA*1500,
col='blue', bg='lightskyblue', pch=21)
posstat
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus*1500,
col='blue', bg='lightskyblue', pch=21)
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg='lightskyblue', pch=21)
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg='lightskyblue', pch=21)
title('Stations with Thunnus larvae')
?points
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg=NULL, pch=21)
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg=NULL, pch=21)
title('Stations with Thunnus larvae')
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05)
text(-170, 4, n)
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05, col='grey')
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg=NULL, pch=21)
title('Stations with Thunnus larvae')
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05, col='grey')
text(-170, 4, n)
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg=NULL, pch=21)
title('Stations with Thunnus larvae')
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05, col='grey')
text(-170, 4, n)
?points
points(posstat$LonDec, posstat$LatDec, col='blue', pch=20)
n<- paste('n =',sum(tunadata$NThunnus, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NThunnus==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NThunnus>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NThunnus,
col='blue', bg=NULL, pch=21)
points(posstat$LonDec, posstat$LatDec, col='blue', pch=20, cex=0.5)
title('Stations with Thunnus larvae')
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05, col='grey')
text(-170, 4, n)
tuna3
n<- paste('n =',sum(tunadata$NSkipjack, na.rm=TRUE), 'total individuals')
plot(coastlineWorldFine, longitudelim=c(-180, -165), latitudelim=c(-6, 3))
contour(topoWorld[["longitude"]], topoWorld[["latitude"]], topoWorld[["z"]],
levels=c(-3000, -3500, -4000, -4500, -5000),
drawlabels=FALSE, add=TRUE, lwd=2, col='dark grey')
negstat<- tunadata[tunadata$NSkipjack==0,]
points(negstat$LonDec, negstat$LatDec, col='red')
posstat<- tunadata[tunadata$NSkipjack>0,]
points(posstat$LonDec, posstat$LatDec, cex=posstat$NSkipjack,
col='blue', bg =NULL, pch=21)
points(posstat$LonDec, posstat$LatDec, pch=20, cex=0.5, col='blue')
title('Stations with Katsuwonus larvae')
quiver(currents[,1], currents[,2], currents[,3], currents[,4], scale=0.012,
length=0.05, col='grey')
text(-170, 4, n)
tuna3
length(23:50)
otoliths<- 2:334;
?shuffle
otoliths<- sample(otoliths)
head(otoliths)
write.csv(otoliths, file='/Users/chrissy/JointProgram/SOF/ChrissySOFtunaOtoliths/shuffledorder.csv')
f = list.files("/Users/chrissy/JointProgram/PIPA/CMS")
f
f = list.files("/Users/chrissy/JointProgram/PIPA/CMS", pattern='traj')
f
class(f)
idata <- nc_open(f[1])
library(ncdf4)
idata <- nc_open(f[1])
?paste
idata <- nc_open(paste("/Users/chrissy/JointProgram/PIPA/CMS/", f[i], sep=''))
i<-1
idata <- nc_open(paste("/Users/chrissy/JointProgram/PIPA/CMS/", f[i], sep=''))
setwd("/Users/chrissy/JointProgram/SOF/larvalassemblage/")
setwd("/Users/chrissy/JointProgram/SOF/larvalassemblage/")
taxa<- read.csv("SOFdataTablesForChrissy/TaxaTable2.csv", header=TRUE)
setwd("/Users/chrissy/JointProgram/SOF/")
taxa<- read.csv("SOFdataTablesForChrissy/TaxaTable2.csv", header=TRUE)
taxa2exclude<- c("Eggs", "Unknown", "Palinuridae", "Scyllaridae", "Leptocephali",
"Stomiodea:superfamily", "Muraenidae", "Synaxidae", "Phyllosoma",
"Ceratiod", "Congridae", "lampridiform", "Stomiiform", "Stomiidae")
exclude<- which(taxa$FamilyName %in% taxa2exclude)
taxa$FamilyName<- as.character(taxa$FamilyName)
taxa$FamilyName[taxa$FamilyName=="Paralichtyidae"]<- "Paralichthyidae"
taxa$FamilyName<- as.factor(taxa$FamilyName)
if (length(exclude)>0){
taxa<- taxa[-exclude,]
}
names(taxa)[1]<- "Sample"
names(taxa)[6]<- "Count"
taxa$Sample<- as.factor(toupper(taxa$Sample))
nets<- read.csv("SOFdataTablesForChrissy/NetTable.csv", header=TRUE)
nets$Cruise<- as.factor(toupper(nets$Cruise))
nets$Nettype<- as.factor(toupper(nets$Nettype))
nets$Haul.<- as.factor(toupper(nets$Haul.))
nets$Gear<- as.factor(toupper(nets$Gear))
nets$Sample.<- as.factor(toupper(nets$Sample.))
events<- read.csv("SOFdataTablesForChrissy/EventTable.csv", header=TRUE)
events$Cruise<- as.factor(toupper(events$Cruise))
events$Haul.<- as.factor(toupper(events$Haul.))
events$Gear<- as.factor(toupper(events$Gear))
events$Type<- as.factor(tolower(events$Type))
nets2<- merge(events, nets, by=c("Cruise", "Haul.", "Gear"))
names(nets2)[26]<- "Sample"
names(nets2)[2]<- "Haul"
head(nets2)
getwd()
setwd("/Users/chrissy/JointProgram/SOF/larvalassemblage/")
data<- read.csv('ReefFishVertDistDataForChrissy.csv', header=TRUE)
head(data)
data2<- aggregate(X.ofindividuals~GenusName+TargetMax, data=data, FUN=sum)
head(data2)
data2<- aggregate(X.ofindividuals~FamilyName+TargetMax, data=data, FUN=sum)
data2[data2$FamilyName=='Mullidae',]
head(taxa)
setwd("/Users/chrissy/JointProgram/SOF/VerticalDistribution//")
lengths<- read.csv('LengthDataTrends.csv')
head(lengths)
mullidae<- lengths[lengths$FamilyName=='Mullidae', c('Sample.', 'Lengthmm')]
head(mullidae)
lengthrange<- c(min(mullidae$Lengthmm), max(mullidae$Lengthmm))
mullidae$Lengthmm<- as.numeric(mullidae$Lengthmm)
head(mullidae)
?read.csv
head(lengths)
lengths<- read.csv('LengthDataTrends.csv',
colClasses=c('factor', 'factor', 'factor', NA, NA, 'numeric'))
lengths<- read.csv('LengthDataTrends.csv',
colClasses=c('factor', 'factor', 'factor', 'numeric', 'numeric', 'numeric'))
lengths<- read.csv('LengthDataTrends.csv', as.is=6)
head(lengths)
class(lengths$Lengthmm)
lengths$Lengthmm<- as.numeric(lengths$Lengthmm)
dim(lengths)
lengths<- read.csv('LengthDataTrends.csv', as.is=6)
lengths$Lengthmm
lengths$Lengthmm<- as.numeric(lengths$Lengthmm)
lengths$Lengthmm
mullidae<- lengths[lengths$FamilyName=='Mullidae', c('Sample.', 'Lengthmm')]
lengthrange<- c(min(mullidae$Lengthmm), max(mullidae$Lengthmm))
lengthrange
head(mullidae)
head(data2)
head(data)
mullidae<- merge(mullidae, data[,c("Sample.", "TargetMax")])
head(mullidae)
dim(mullidae)
mullidae<- lengths[lengths$FamilyName=='Mullidae', c('Sample.', 'Lengthmm')]
dim(mullidae)
mullidae<- merge(mullidae, data[,c("Sample.", "TargetMax")], all.y=FALSE)
dim(mullidae)
mullidae<- lengths[lengths$FamilyName=='Mullidae', c('Sample.', 'Lengthmm')]
setwd('/Users/chrissy/JointProgram/ArcticCod/SKQ201713S/')
MWstations<- read.csv('mwtrawl_stations.csv')
head(MWstations)
cod<- read.csv('mwtrawl_ArcticCod.csv')
head(cod)
names(MWstations)
names(MWstations)[14]<- 'TotalCatchCod'
MWstations$TotalCatchCod
MWstations$TotalCatchCod[1]<- NA
MWstations<- read.csv('mwtrawl_stations.csv', as.is=1:16)
names(MWstations)[14]<- 'TotalCatchCod'
MWstations$TotalCatchCod
MWstations$TotalCatchCod[1]<- NA
MWstations$TotalCatchCod<- as.numeric(MWstations$TotalCatchCod)
MWstations$TotalCatchCod
length(MWstations$Cruise)
sum(MWstations$TotalCatchCod, na.rm=TRUE)
names(cod)
min(FL_mm)
min(cod$FL_mm)
max(cod$FL_mm)
hist(cod$FL_mm)
hist(cod$FL_mm, xlab='Fork Length (mm)')
hist(cod$FL_mm, xlab='Fork Length (mm)', main=NA)
length(cod$FL_mm)
sum(cod$Gut_Bagged.=='y')
sum(cod$Gut_Bagged.=='Y')
cod<- tolower(cod)
sum(cod$Gut_Bagged.=='y')
cod<- read.csv('mwtrawl_ArcticCod.csv')
sum(cod$Gut_Bagged.=='y')+sum(cod$Gut_Bagged.=='Y')
sum(cod$Liver_Bagged.=='y')+sum(cod$Liver_Bagged.=='Y')
sum(cod$Musc_Bagged.=='y')+sum(cod$Musc_Bagged.=='Y')
sum(cod$Head_Bagged.=='y')+sum(cod$Head_Bagged.=='Y')
sum(cod$Frozen_Whole.=='y')+sum(cod$Frozen_Whole.=='Y')
sum(cod$RNAlater.=='y')+sum(cod$RNAlater.=='Y')
tucker<- read.csv('planktontow_fish.csv')
head(tucker)
sum(tucker$No_Fish[tucker$Gear=='Tucker'])
sum(tucker$No_Fish[tucker$Gear=='Ring'])
sum(tucker$No_Fish[tucker$Gear=='Bongo'])
sum(tucker$No_Fish)
